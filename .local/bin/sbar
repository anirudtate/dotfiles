#!/bin/env sh

# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_time () {
	time="$(date "+[%a %d %b] [%I:%M %P]")"
}

update_cpu () {
	cpu="$(grep -o "^[^ ]*" /proc/loadavg )"
}

update_memory () {
	memory="$(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
}
update_bat () {
	# you might need to change the path depending on your device
	read -r bat_status </sys/class/power_supply/BAT0/status
	read -r bat_capacity </sys/class/power_supply/BAT0/capacity
	bat="$bat_status $bat_capacity%"
}

update_vol () {
	vol="$([ "$(pamixer --get-mute)" = "false" ] && printf 'unmuted ' || printf 'muted ')$(pamixer --get-volume)%"
}

# modules that don't update on their own need to be run at the start for getting their initial value
update_vol

display () {
	#printf "%s\n" " $event [$weather] [$memory $cpu] [$bat] [$backlight] [$vol] $time "
	xsetroot -name " [$memory $cpu] [$bat] [$vol] $time"
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
trap	"update_bat;display" 		"RTMIN+2"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
  pidof dwm >/dev/null || break
	sleep 5 & wait && {
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 5)) -eq 0 ] && update_cpu 	# update cpu every 55 seconds
		[ $((sec % 5)) -eq 0 ] && update_memory
		[ $((sec % 5)) -eq 0 ] && update_bat

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 5))
	}
done
